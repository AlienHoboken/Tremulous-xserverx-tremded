Index: src/qcommon/q_shared.h
===================================================================
--- src/qcommon/q_shared.h	(revision 1112)
+++ src/qcommon/q_shared.h	(working copy)
@@ -1070,8 +1071,6 @@
 	int			torsoTimer;		// don't change low priority animations until this runs out
 	int			torsoAnim;		// mask off ANIM_TOGGLEBIT
 
-	int			weaponAnim;		// mask off ANIM_TOGGLEBIT
-
 	int			movementDir;	// a number 0 to 7 that represents the reletive angle
 								// of movement to the view angle (axial and diagonals)
 								// when at rest, the value will remain unchanged
@@ -1107,6 +1106,7 @@
 	int			misc[MAX_MISC];	// misc data
 	int			ammo;			// ammo held
 	int			clips;			// clips held
+	int			padding[14];
 
 	int			generic1;
 	int			loopSound;
@@ -1228,7 +1228,6 @@
 	int		weapon;			// determines weapon and flash model, etc
 	int		legsAnim;		// mask off ANIM_TOGGLEBIT
 	int		torsoAnim;		// mask off ANIM_TOGGLEBIT
-	int		weaponAnim;		// mask off ANIM_TOGGLEBIT
 
 	int		generic1;
 } entityState_t;
Index: src/qcommon/qcommon.h
===================================================================
--- src/qcommon/qcommon.h	(revision 1112)
+++ src/qcommon/qcommon.h	(working copy)
@@ -229,7 +229,7 @@
 ==============================================================
 */
 
-#define	PROTOCOL_VERSION	70
+#define	PROTOCOL_VERSION	69
 
 // maintain a list of compatible protocols for demo playing
 // NOTE: that stuff only works with two digits protocols
Index: src/qcommon/msg.c
===================================================================
--- src/qcommon/msg.c	(revision 1112)
+++ src/qcommon/msg.c	(working copy)
@@ -819,7 +819,6 @@
 { NETF(angles2[1]), 0 },
 { NETF(eType), 8 },
 { NETF(torsoAnim), 8 },
-{ NETF(weaponAnim), 8 },
 { NETF(eventParm), 8 },
 { NETF(legsAnim), 8 },
 { NETF(groundEntityNum), GENTITYNUM_BITS },
@@ -839,7 +838,7 @@
 { NETF(modelindex), 8 },
 { NETF(otherEntityNum2), GENTITYNUM_BITS },
 { NETF(loopSound), 8 },
-{ NETF(generic1), 16 },
+{ NETF(generic1), 8 },
 { NETF(origin2[2]), 0 },
 { NETF(origin2[0]), 0 },
 { NETF(origin2[1]), 0 },
@@ -1135,7 +1134,6 @@
 { PSF(pm_time), -16 },
 { PSF(eventSequence), 16 },
 { PSF(torsoAnim), 8 },
-{ PSF(weaponAnim), 8 },
 { PSF(movementDir), 4 },
 { PSF(events[0]), 8 },
 { PSF(legsAnim), 8 },
@@ -1154,9 +1152,7 @@
 { PSF(damageYaw), 8 },
 { PSF(damagePitch), 8 },
 { PSF(damageCount), 8 },
-{ PSF(ammo), 12 },
-{ PSF(clips), 4 },
-{ PSF(generic1), 16 },
+{ PSF(generic1), 8 },
 { PSF(pm_type), 8 },					
 { PSF(delta_angles[0]), 16 },
 { PSF(delta_angles[2]), 16 },
@@ -1184,6 +1180,7 @@
 	playerState_t	dummy;
 	int				statsbits;
 	int				persistantbits;
+	int				ammobits;
 	int				miscbits;
 	int				numFields;
 	int				c;
@@ -1264,6 +1261,12 @@
 			persistantbits |= 1<<i;
 		}
 	}
+	ammobits = (to->ammo != from->ammo) | (to->clips != from->clips) << 1;
+	for (i=0 ; i<14 ; i++) {
+		if (to->padding[i] != from->padding[i]) {
+			ammobits |= 4<<i;
+		}
+	}
 	miscbits = 0;
 	for (i=0 ; i<MAX_MISC ; i++) {
 		if (to->misc[i] != from->misc[i]) {
@@ -1271,7 +1274,7 @@
 		}
 	}
 
-	if (!statsbits && !persistantbits && !miscbits) {
+	if (!statsbits && !persistantbits && !ammobits && !miscbits) {
 		MSG_WriteBits( msg, 0, 1 );	// no change
 		oldsize += 4;
 		return;
@@ -1300,6 +1303,21 @@
 	}
 
 
+	if ( ammobits ) {
+		MSG_WriteBits( msg, 1, 1 );	// changed
+		MSG_WriteBits( msg, ammobits, MAX_WEAPONS );
+		if(ammobits & 1)
+			MSG_WriteShort(msg, to->ammo);
+		if(ammobits & 2)
+			MSG_WriteShort(msg, to->clips);
+		for (i=0 ; i<14 ; i++)
+			if (ammobits & (4<<i) )
+				MSG_WriteShort (msg, to->padding[i]);
+	} else {
+		MSG_WriteBits( msg, 0, 1 );	// no change
+	}
+
+
 	if ( miscbits ) {
 		MSG_WriteBits( msg, 1, 1 );	// changed
 		MSG_WriteBits( msg, miscbits, MAX_MISC );
@@ -1419,6 +1437,21 @@
 			}
 		}
 
+		// parse ammo
+		if ( MSG_ReadBits( msg, 1 ) ) {
+			LOG("PS_AMMO");
+			bits = MSG_ReadBits (msg, MAX_WEAPONS);
+			if(bits & 1)
+				to->ammo = MSG_ReadShort(msg);
+			if(bits & 2)
+				to->clips = MSG_ReadShort(msg);
+			for (i=0 ; i<14 ; i++) {
+				if (bits & (4<<i) ) {
+					to->padding[i] = MSG_ReadShort(msg);
+				}
+			}
+		}
+
 		// parse misc data
 		if ( MSG_ReadBits( msg, 1 ) ) {
 			LOG("PS_MISC");
Index: Makefile
===================================================================
--- Makefile	(revision 1112)
+++ Makefile	(working copy)
@@ -52,6 +52,8 @@
 #
 #############################################################################
 -include Makefile.local
+BUILD_GAME_SO=0
+BUILD_GAME_QVM=0
 
 ifndef PLATFORM
 PLATFORM=$(COMPILE_PLATFORM)
